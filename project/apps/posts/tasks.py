from celery import task
import codecs
import datetime
import os
import shutil
import tempfile
import zipfile

# Sometimes, it's just faster not to reinvent the wheel.
# Via http://stackoverflow.com/questions/1855095/how-to-create-a-zip-archive-of-a-directory-in-python
def make_zipfile(output_filename, source_dir):
    relroot = os.path.abspath(os.path.join(source_dir, os.pardir))
    with zipfile.ZipFile(output_filename, "w", zipfile.ZIP_DEFLATED) as zip:
        for root, dirs, files in os.walk(source_dir):
            # add directory (needed for empty dirs)
            zip.write(root, os.path.relpath(root, relroot))
            for file in files:
                filename = os.path.join(root, file)
                if os.path.isfile(filename): # regular files only
                    arcname = os.path.join(os.path.relpath(root, relroot), file)
                    zip.write(filename, arcname)



@task
def generate_backup_zip(author_id):
    from django.core.files import File
    from posts.models import Author, Backup

    try:
        author = Author.objects.get(pk=author_id)
    except:
        print "Could not find author %s" % author_id
        return

    temp_folder_path = tempfile.mkdtemp()
    backup_folder_path = os.path.join(temp_folder_path, "Backup")
    os.mkdir(backup_folder_path)
    now = datetime.datetime.now()

    # backup structure
    # /Author-Name-footprints-backup-2014-05-16.zip
    #     /Posts
    #        Post-Title.html
    #     /Revisions
    #        /Post-Title.html
    #           Post-Title-2014-03-21-12.56.12pm.html
    #     Read-List.html
    #     Fantastic-List.html

    post_folder = os.path.join(backup_folder_path, "Posts")
    os.mkdir(post_folder)
    for p in author.post_set.all():
        with codecs.open(os.path.join(post_folder, "%s.html" % p.slug), "w+", "utf-8") as f:
            f.write("<h1>%s</h1>\n" % p.title)
            f.write(p.body.replace("<br/>", "<br/>\n"))

    revisions_folder = os.path.join(backup_folder_path, "Revisions")
    os.mkdir(revisions_folder)
    for p in author.postrevision_set.all():
        revision_folder = os.path.join(revisions_folder, p.post.title)

        if not os.path.exists(revision_folder):
            os.mkdir(revision_folder)

        revision_filename = os.path.join(
            revision_folder,
            "%s-%s.html" % (p.title, p.revised_at.strftime("%Y-%m-%d.%H.%M.%s"))
        )
        counter = 1
        while os.path.exists(revision_filename):
            revision_filename = os.path.join(
                revision_folder,
                "%s-%s-%s.html" % (p.title, p.revised_at.strftime("%Y-%m-%d.%H.%M.%s"), counter)
            )
            counter += 1

        with codecs.open(revision_filename, "w+", "utf-8") as f:
            f.write("Revised %s\n\n" % p.revised_at.strftime("%c"))
            f.write("<h1>%s</h1>\n" % p.title)
            f.write(p.body.replace("<br/>", "<br/>\n"))

    # Read List
    with open(os.path.join(backup_folder_path, "read-list.html"), "w+") as f:
        f.write("<h1>Read list</h1>\n")
        for r in author.read_set.all():
            f.write("On %s: %s by %s<br/>\n" % (r.read_at.strftime("%Y-%m-%d"), r.post.title, r.post.author.name))

    # Fantastic-List
    with open(os.path.join(backup_folder_path, "fantastic-list.html"), "w+") as f:
        f.write("<h1>Fantastic list:</h1>\n")
        for r in author.fantastic_set.all():
            f.write("On %s: %s by %s<br/>\n" % (r.marked_at.strftime("%Y-%m-%d"), r.post.title, r.post.author.name))

    # Footprints.txt
    with open(os.path.join(backup_folder_path, "footprints.txt"), "w+") as f:
        f.write("This backup file was generated by footprints.org on %s." % (now.strftime("%B %d, %Y"),))

    # Write the file
    zip_name = os.path.join(temp_folder_path, '%s-footprints-backup-%s.zip' % (
        author.name, now.strftime("%Y-%m-%d")
    ))
    make_zipfile(zip_name, backup_folder_path)

    b = Backup.objects.create(
        author=author,
        num_posts=author.post_set.all().count(),
        num_revisions=author.postrevision_set.all().count(),
        num_reads=author.read_set.all().count(),
        num_fantastics=author.fantastic_set.all().count(),
    )
    with open(zip_name, 'r') as f:
        b.zip_file = File(f)
        b.save()

    shutil.rmtree(temp_folder_path)
